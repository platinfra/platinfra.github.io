{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to platinfra","text":"<p><code>platinfra</code> came to be when i started exploring the different tools in mlops space and had the intention of deploying them on the cloud. The idea was to liberate the IaC logic for creating MLOps stacks and accelerate the deployment and decision making process for MLOps engineers so that they can focus where it matters; on choosing the right tooling for their workflows.</p> <p>platinfra allows MLOps and DevOps to deploy different MLOps tools for different stages of the machine learning lifecycle. The magic of platinfra is hidden in the python layer, that reads through the deployment config and deploys all these tools using terraform modules and connects them using dynamically generated set of roles and permissions.</p> <p>platinfra deploys infrastructure using a declarative approach. The minimal spec for aws cloud as infra with custom applications deployed is as follows:</p> <pre><code>name: aws-mlops-stack\nprovider:\n  name: aws\n  account-id: xxxxxxxxx\ndeployment:\n  type: kubernetes\nstack:\n  data_versioning:\n    - dvc # can also be pachyderm or lakefs or neptune and so on\n  experiment_tracker:\n    - mlflow # can be weights and biases or determined, or neptune or clearml and so on...\n  pipelining:\n    - zenml # can also be argo, or luigi, or airflow, or dagster, or prefect or flyte or kubeflow and so on...\n  orchestrator:\n    - aws-batch # can also be aws step functions or aws-fargate or aws-eks or azure-aks and so on...\n  runtime_engine:\n    - ray # can also be horovod or apache spark\n  artifact_tracker:\n    - mlflow # can also be neptune or clearml or lakefs or pachyderm or determined or wandb and so on...\n  # model registry and serving are quite close, need to think about them...\n  model_registry:\n    - bentoml # can also be  mlflow or neptune or determined and so on...\n  model_serving:\n    - nvidia_triton # can also be bentoml or fastapi or cog or ray or seldoncore or tf serving\n  monitoring:\n    - nannyML # can be grafana or alibi or evidently or neptune or mlflow or prometheus or weaveworks and so on...\n  alerting:\n    - mlflow # can be mlflow or neptune or determined or weaveworks or prometheus or grafana and so on...\n</code></pre>"},{"location":"CONTRIBUTING/","title":"Contributing to platinfra","text":"<p>Thank you for your interest in contributing to this project! I really appreciate that you took your time and interest in contributing platinfra. I'd love to hear from your experience and opinions. Drop me a line in the discord channel.</p> <p>We appreciate issue reports, pull requests for code and documentation, as well as any project-related communication through discussions.</p>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":"<ul> <li> <p>To get started, first pat yourself!</p> </li> <li> <p>platinfra is organised as follows:</p> <ul> <li><code>platinfra</code> cli and all terraform modules are in the <code>platinfra</code> repo</li> <li>Generated docs are in <code>platinfra.github.io</code> repo but the source code is in <code>platinfra</code> repo.</li> </ul> </li> <li> <p>Fork the platinfra repo and clone it to your local machine.</p> </li> <li>To get started with the website, fork both platinfra and platinfra.github.io repos and clone them to your local machine.</li> <li>To get started with the documentation, go to <code>platinfra/docs</code> and run <code>mkdocs serve</code> to view the docs locally.</li> </ul>"},{"location":"CONTRIBUTING/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"CONTRIBUTING/#report-bug","title":"Report Bug","text":"<ul> <li>The best way to report a bug is to file an issue on GitHub. Please make sure there is an open issue discussing your contribution. </li> <li>Before opening a new issue, please check for existing issues. If you find an existing issue that matches closely with yours, please thumbs-up or comment on it, so we know that the issue is relevant to many people. For any new issue please include:<ul> <li>Your operating system name and version.</li> <li>Opta version.</li> <li>Detailed steps to reproduce the bug.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>When posting Python stack traces, please quote them using Markdown blocks.</li> <li>Label the issue with <code>bug</code></li> </ul> </li> </ul>"},{"location":"CONTRIBUTING/#submitting-ideas-or-feature-requests","title":"Submitting Ideas or Feature Requests","text":"<p>The best way is to file an issue on GitHub:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Label the issue with <code>feature-request</code></li> </ul>"},{"location":"CONTRIBUTING/#improve-documentation","title":"Improve Documentation","text":"<p>platinfra could always use better documentation, so feel free to create an issue and discuss your changes.</p>"},{"location":"CONTRIBUTING/#bugfix-resolution-time-expectations","title":"Bugfix resolution time expectations","text":"<ul> <li>We will respond to all new issues within 2-3 days</li> <li>For any serious (production breaking) bug we will try to resolve ASAP and do a hotfix release</li> <li>For other bugs we will try to resolve them within the next 2 releases (There is a release every 2 weeks).</li> </ul>"},{"location":"CONTRIBUTING/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>A philosophy we would like to strongly encourage is</p> <p>Before creating a PR, create an issue.</p> <p>The purpose is to separate problem from possible solutions.</p> <p>Bug fixes: If you\u2019re only fixing a small bug, it\u2019s fine to submit a pull request right away but we highly recommend to file an issue detailing what you\u2019re fixing and its impact. This is helpful in case we don\u2019t accept that specific fix owing to the roadmap but want to keep track of the issue. Please keep in mind that the project maintainers reserve the rights to accept or reject incoming PRs, so it is better to separate the issue and the code to fix it from each other. In some cases, project maintainers may request you to create a separate issue from PR before proceeding.</p> <p>Feature/Large changes: If you intend to change the public API, or make any non-trivial changes to the implementation, we require you to file a new issue and document your thoughts as much as possible. This lets us reach an agreement on your proposal before you put significant effort into it. You are welcome to submit a PR along with the issue (sometimes necessary for demonstration), but we will not review/merge the code until there is an agreement on the issue.</p> <p>In general, small PRs are always easier to review than large PRs. The best practice is to break your work into smaller independent PRs and refer to the same issue. This will greatly reduce turnaround time.</p> <p>If you wish to share your work which is not ready to merge yet, create a Draft PR. This will enable maintainers and the CI runner to prioritize mature PR's.</p> <p>Finally, please never submit a PR that will put the main branch in broken state. If the PR is part of multiple PRs to complete a large feature and cannot work on its own, you can create a feature branch and merge all related PRs into the feature branch before creating a PR from feature branch to main.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by the platinfra Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior via <code>ali.abbasjaffri [at] live dot com</code>.</p>"},{"location":"SECURITY/","title":"Security Policy","text":""},{"location":"SECURITY/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you find some security vulnerability, please immediately inform at <code>ali.abbasjaffri [at] live dot com</code> and we will get back to you within 12 hours.</p>"},{"location":"user_guide/how_platinfra_works/","title":"User Guide","text":""},{"location":"user_guide/how_platinfra_works/#how-platinfra-works","title":"How platinfra works","text":"<ul> <li>A sample mlops stack looks something like this:</li> <li>The same stack can be configured to quite an extent:</li> </ul> Simple Deployment ConfigurationAdvanced Deployment Configuration <pre><code>name: simple-mlops-stack\nprovider:\n  name: aws\n  account_id: \"aws-12-digit-account-id\"\n  region: \"aws-region\"\ndeployment:\n  type: cloud_infra\nstack:\n  - data_versioning:\n      name: lakefs\n  - experiment_tracking:\n      name: mlflow\n  - pipelining:\n      name: prefect\n</code></pre> <pre><code>name: simple-mlops-stack-advanced\nprovider:\n  name: aws\n  account_id: \"aws-12-digit-account-id\"\n  region: \"aws-region\"\ndeployment:\n  type: cloud_infra\nstack:\n  - data_versioning:\n      name: lakefs\n      params:\n        remote_tracking: true\n        database_type: \"dynamodb\"\n        lakefs_data_bucket_name: \"lakefs-repository-data-bucket\"\n        dynamodb_table_name: \"lakefs_kvstore\"\n  - experiment_tracking:\n      name: mlflow\n      params:\n        remote_tracking: true\n        mlflow_artifacts_bucket_name: \"artifacts-storage-bucket\"\n  - pipelining:\n      name: prefect\n      params:\n        remote_tracking: true\n        ec2_application_port: 9500\n</code></pre>"},{"location":"user_guide/how_platinfra_works/#stack-file-composition","title":"Stack file Composition","text":"<p><code>platinfra</code> stack file is composed of 4 components:</p> <ul> <li><code>name</code>: <code>name</code> denotes the name of the stack. This is used internally to identify the state of the the stack deployment.</li> <li><code>provider</code> block:<ul> <li><code>provider</code> block allows you to define where your stack gets deployed, whether it be local or on the cloud.</li> <li><code>account_id</code> and <code>region</code> are used to configure the cloud provider.</li> </ul> </li> <li><code>deployment</code> block:<ul> <li><code>deployment</code> block defines the configuration of how the components get configured under the hood before deployment of mlops stack.</li> <li>For now, <code>type</code> can be either <code>cloud_infra</code> or <code>kubernetes</code>. We're working to introduce more deployment types.</li> <li><code>type: cloud_infra</code> is used to deploy the stack to the cloud instances, whereas <code>kubernetes</code> uses cloud provider's kubernetes service to deploy the stack.</li> </ul> </li> <li><code>stack</code> block:<ul> <li><code>stack</code> block defines the different application stacks that are deployed to the above mentioned <code>deployment</code> stack.</li> <li>Each mlops stack is defined by a <code>name</code>. All stacks can be deployed from a simple name configuration to a more complex configuration where different components are   deployed on cloud provider infrastructure components.</li> </ul> </li> </ul>"}]}